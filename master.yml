- name: "Main playbook for the laptop"
  hosts: poma-laptop

  vars:
    username: poma
    systemwide_env:
      - key: EDITOR
        value: vim
      - key: BROWSER
        value: google-chrome-stable
      # make java programs (I mean jetbrains) work with wayland
      - key: _JAVA_AWT_WM_NONREPARENTING
        value: '1'

    command_aliases:
      - alias: ap
        command: 'sudo ansible-playbook'
      - alias: adm
        command: 'ansible-doc -t module'
      - alias: top
        command: 'top -o %MEM'
      - alias: code
        command: 'vscodium'
    bash_variables:
      # increase history lines to keep
      - name: HISTSIZE
        value: 10000
      - name: HISTFILESIZE
        value: 10000
      # append current session's command to history on execute, clear history cache and reread 
      # history file, don't wait for exit to do so. 
      # It results in sharing command history of all open shells, and prevents loosing history 
      # when the os hangs or for example pycharm is killed with some terminals
      - name: PROMPT_COMMAND
        value: "${PROMPT_COMMAND:+$PROMPT_COMMAND$'\n'}history -a; history -c; history -r"
          

  tasks:
    - name: Ensure odoo user exists
      ansible.builtin.user:
        name: 'odoo'
        create_home: true
        generate_ssh_key: false
        ssh_key_type: ed25519
        home: '/home/odoo'
        hidden: true
      become: true
      when: username != 'odoo'

    - name: Ensure main user's access groups
      ansible.builtin.user:
        name: '{{ username }}'
        create_home: true
        generate_ssh_key: true
        ssh_key_type: ed25519
        group: '{{ username }}'
        groups:
          - sudo
          - odoo
        append: true
      become: true
      register: user
      tags:
        - always

    - name: Set current user sudo nopassword
      community.general.sudoers:
        name: '90-{{ user.name }}'
        nopassword: true
        user: '{{ user.name }}'
        commands: ALL

    - name: Create the `aur_builder` user
      ansible.builtin.user:
        name: aur_builder
        create_home: true
        group: wheel
      become: true
      tags:
        - packages

    - name: Allow the `aur_builder` user to run `sudo pacman` without a password
      ansible.builtin.lineinfile:
        path: /etc/sudoers.d/11-install-aur_builder
        line: 'aur_builder ALL=(ALL) NOPASSWD: /usr/bin/pacman'
        create: true
        mode: 0440
        validate: 'visudo -cf %s'
      become: true
      tags:
        - packages

    - name: "Install AUR package manager yay"
      ansible.builtin.package:
        name:
          - yay
        state: present
      become: true
      tags:
        - packages


    - name: 'Install Multimedia packages'
      ansible.builtin.package:
        name:
          - mpv
          - ffmpeg
          - youtube-dl
        state: present
      become: true
      tags:
        - packages

    - name: 'Install extra Multimedia packages '
      kewlfft.aur.aur:
        name:
          - sbagen
        use: yay
        state: present
      become: true
      become_user: aur_builder
      tags:
        - packages

    - name: 'Install connectivity packages'
      ansible.builtin.package:
        name:
          - kdeconnect
          - blueberry
      become: true
      tags:
        - packages

    - name: 'Install development base packages'
      ansible.builtin.package:
        name:
          - nodejs
          - gettext
      become: true
      tags:
        - packages
        - dev

    - name: 'Install development tools packages'
      ansible.builtin.package:
        name:
          - git
          - pycharm-community-edition
          - plantuml
          - vscodium-bin
          - vim-ansible
          - ansible-lint
      become: true
      tags:
        - packages
        - dev

    - name: 'Install utility packages'
      ansible.builtin.package:
        name:
          - gimp
          - vim
          - libsecret
          - keepassxc
          - mc
          - wl-clipboard
      become: true
      tags:
        - packages

    - name: 'Install dnsmasq'
      tags:
        - packages
        - lab
      become: true
      block:
        - name: 'Install dnsmasq package'
          ansible.builtin.package:
            name:
              - dnsmasq
        - name: "Ensure Networkmanager's dnsmasq config dir exists"
          ansible.builtin.file:
            path: "/etc/NetworkManager/dnsmasq.d"
            state: directory
            mode: '0755'

        - name: 'Setup dnsmasq config for odoo.local'
          ansible.builtin.template:
            src: "templates/lab/dnsmasq/odoo.local.j2"
            dest: "/etc/NetworkManager/dnsmasq.d/odoo.local"
            owner: "{{ user['name'] }}"
            group: "{{ user['name'] }}"
            mode: '0644'
          notify: "restart NetworkManager"

#        - name: 'Enable dnsmasq service'
#          ansible.builtin.service:
#            name: dnsmasq
#            enabled: true
#            state: "started"
#
    - name: 'Install docker'
      ansible.builtin.package:
        name:
          - docker
          - docker-compose

    - name: 'Add user to the docker group'
      ansible.builtin.user:
        name: "{{ user.name }}"
        groups: docker
        append: true
      notify: 'Message about docker group'

    - name: 'Install qemu based vistualizasion'
      ansible.builtin.package:
        name:
          - libvirt
          - bridge-utils
          - qemu-full
          - virt-install
          - virt-viewer
      become: true
      tags:
        - packages
        - virt
        - lab

  # - name: 'Init libvirt Network'
  #    community.libvirt.virt_net:
  #      command: define
  #      name: virnet0
  #      xml: '{{ lookup("template", "templates/virt/network.xml.j2") }}'
  #      Instead enable default network
  #    tags:
  #      - packages
  #      - virt

    - name: 'Prepare for virtualbox installation'
      ansible.builtin.package:
        name:
          - virtualbox-host-dkms
        state: absent
      tags:
        - packages
        - virt

    - name: 'Install virtualbox'
      ansible.builtin.package:
        name:
          - virtualbox
          - virtualbox-host-modules-arch
      tags:
        - packages
        - virt

    - name: 'Load vistualbox kernel module'
      community.general.modprobe:
        name: vboxdrv
      tags:
        - packages
        - virt

    - name: 'Setup environment variables'
      ansible.builtin.lineinfile:
        dest: "/etc/environment"
        state: present
        regexp: "^{{ item.key }}="
        line: "{{ item.key }}={{ item.value }}"
      with_items: "{{ systemwide_env }}"
      tags:
        - config

    - name: 'Setup command aliases'
      ansible.builtin.lineinfile:
        dest: "{{ user['home'] }}/.bashrc"
        state: present
        line: "alias {{ item.alias }}='{{ item.command }}'"
        regexp: "^\\s*alias {{ item.alias }}=.*$"
        insertafter: "^alias .*="
      with_items: "{{ command_aliases }}"
      tags:
        - config

    - name: 'Setup Bash variables'
      ansible.builtin.lineinfile:
        dest: "{{ user['home'] }}/.bashrc"
        state: present
        line: "export {{ item.name }}='{{ item.value }}'"
        regexp: "^\\s*alias {{ item.name }}=.*$"
        insertafter: "^alias .*="
      with_items: "{{ bash_variables }}"
      tags:
        - config

    - name: 'Config ssh agent'
      tags:
        - config
        - ssh
      block:
        - name: 'Ensure systemd folder for user defined units is present'
          ansible.builtin.file:
            path: "{{ user['home'] }}/.config/systemd/user"
            state: directory
            owner: '{{ username }}'
            group: '{{ username }}'
            mode: '0755'

        - name: 'Ensure ssh-agent systemd unit file'
          ansible.builtin.copy:
            dest: "{{ user['home'] }}/.config/systemd/user/ssh-agent.service"
            owner: "{{ user['name'] }}"
            mode: "0640"
            content: |
              [Unit]
              Description=SSH key agent
              
              [Service]
              Type=simple
              Environment=SSH_AUTH_SOCK=%t/ssh-agent.socket
              # DISPLAY required for ssh-askpass to work
              # Environment=DISPLAY=:0
              ExecStart=/usr/bin/ssh-agent -D -a $SSH_AUTH_SOCK
              
              [Install]
              WantedBy=default.target
    
        - name: 'Setup environment variables'
          ansible.builtin.lineinfile:
            dest: "/etc/environment"
            state: present
            regexp: "^SSH_AUTH_SOCK="
            line: "SSH_AUTH_SOCK=/run/user/{{ user.uid }}/ssh-agent.socket"

        - name: 'Ensure ssh-aget service is active & running'
          ansible.builtin.systemd:
            name: "ssh-agent"
            state: "started"
            scope: "user"
            enabled: true
            daemon-reload: true 
          become: true
          become_user: "{{ user['name'] }}"
              
        - name: 'Set ssh config'
          ansible.builtin.lineinfile:
            dest: "{{ user['home'] }}/.ssh/config"
            create: true
            line: "AddKeysToAgent yes"
            regexp: "AddKeyToAgent.*"
            owner: "{{ user['name'] }}"
            mode: "0640"

    - name: 'Config sway'
      tags:
        - config
        - sway
      block:
        - name: 'Install cipboard Manager'
          kewlfft.aur.aur:
            name:
              - clipman
            use: yay
            state: present
          become: true
          become_user: aur_builder
          tags:
            - packages

        - name: 'Sway config folder present'
          ansible.builtin.file:
            path: "{{ user['home'] }}/.config/sway/config.d"
            state: directory
            owner: '{{ username }}'
            group: '{{ username }}'
            mode: '0755'

        - name: 'Unmanaged sway config files'
          ansible.builtin.find:
            paths: "{{ user['home'] }}/.config/sway/config.d"
            excludes: "{{ lookup('ansible.builtin.fileglob', 'templates/sway/*.j2', wantlist=True) | map('basename') | map('regex_replace', '\\.j2$', '') }}"
          register: unmanaged_sway_configs

        - name: 'Clear sway default config'
          ansible.builtin.file:
            path: "{{ item.path }}"
            state: absent
          with_items: "{{ unmanaged_sway_configs.files }}"

        - name: 'Setup sway config'
          ansible.builtin.template:
            src: "{{ item }}"
            dest: "{{ user['home'] }}/.config/sway/config.d/{{ item | basename | regex_replace('\\.j2$', '') }}"
            owner: '{{ username }}'
            group: '{{ username }}'
            mode: '0640'
          with_fileglob:
            - "templates/sway/*.j2"

        - name: 'Ensure sway config folder is loaded'
          ansible.builtin.lineinfile:
            dest: "{{ user['home'] }}/.config/sway/config"
            create: true
            owner: '{{ username }}'
            mode: '0640'
            state: present
            line: "include $HOME/.config/sway/config.d/*"

          #    - name: 'Setup sway config lock screen'
          #      ansible.builtin.blockinfile:
          #        dest: "{{ user['home'] }}/.config/sway/config.d/10-lock"
          #        create: true
          #        owner: '{{ username }}'
          #        state: present
          #        line: "{{ item }}"
          #      with_items:
          #        - set $mod Mod4
          #        - set $left h
          #        - set $down j
          #        - set $up k
          #        - set $right l

        # validate is not working when sway is running with No DRM backend supplied error
        # - name: 'ensure sway config is valid'
        #   ansible.builtin.command: "sway -c {{ user['home'] }}/.config/sway/config --validate --verbose"
        #   become: true
        #   become_user: "{{ user['name'] }}"
        #   # for method: https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_privilege_escalation.html#may-not-access-environment-variables-populated-by-pamd-systemd
        #   become_method: machinectl

  handlers:
    - name: 'Message about docker group'
      ansible.builtin.debug:
        msg: "You have been added to docker group, don't forget to logoff/on or run newgrp"

    - name: "Restart NetworkManager"
      ansible.builtin.service:
        name: NetworkManager
        state: "restarted"
